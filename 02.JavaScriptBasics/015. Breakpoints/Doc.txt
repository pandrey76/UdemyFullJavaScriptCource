
Ингда мы получаем ошибки, которые очень тяжело отследить в коде, это могут быть ошибки самой бизнес логики программы,
т.е. она оаботает не так как надо или это может быть не правильная работа с типами данных и эти ошибки нам надо искать
 и исправлять.

 Для этого открываем браузер идём в "Инструменты разработчика" открывем вкладку "Sources", там выбираем файл, в нашем
     случае "script.js" потому что имено его мы будем инспектировать.

 Файл: script.js
////////////////////////////////////////////////////////////
1.    function hello() {
2.         console.log("Hello World!");
3.    }
4.
5.    hello();
6.
7.    function hi() {
8.         console.log("Hello World");
9.    }
10.
11.    hi();
12.
13.    let arr = [1, 15, 4, 30, 42 ];
14.         let i = arr.sort(compareNum);
15.
16.    function compareNum(a, b) {
17.         return a - b;
18.    }
19.    console.log(arr);
////////////////////////////////////////////////////////////

Мы видем в нём три функции. В консоли мы видим результат, что всё в порядке
////////////////////////////////////////////////////////////
    Hello World!
    Hello World
    (5) [1, 4, 15, 30, 42]
////////////////////////////////////////////////////////////
Для того, чтобы мы могли остановить наш код в любом месте, котором мы захотим нам надо использовать breakpoints.
Breakpoints ставятся по клику левой кнопки мыши на против нужной нам строчки кода.
Ставим breakpoints на строчки: 5, 11,13 и 17.
Далее обновляем страницу.
Наш код остановился на строке 5 и справа появится панель отладки, такая же как и у всех IDE.

Описание панели отладки браузера Chrome.

Быстрые клавиши:

F8 - Resume script executions;
F10 - Step over next function call;
F11 - Step into next function call;
Shift+F11 - Step out of current function;
F9 - Step;
Ctrl+F8 - Deactivate breakpoints.

При обновлении страницы у нас скрипт встаёт на первом breakpoint и встаёт на паузу.
Дополнительная кнопка: "Pause of exception" мы можем включать или выключать паузу на каких-нибудь сообщениях.

Вкладки.

Call Stack - это вызов всех функций, которые привели к этому результату;
Scope - это наши переменные, данные, которые мы сейчас используем.
Breakpoints - это там где мы поставили точки останова.

Вкладки ниже (XHR/fetch Breakpoints, DOM Breakpoints, Global Listeners, EventListener Breakpoints) связаны
с обработчиком событий, с которым мы разберёмся, чуть-чуть по позже.

