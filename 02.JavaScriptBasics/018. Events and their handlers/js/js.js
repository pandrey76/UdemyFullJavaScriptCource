let btn = document.getElementsByTagName('button');

// Второй способ - это использовать свойство DOM для событий.

// btn[0].onclick = function () {
//     alert("Вы нажали первую кнопку вторым способом лобавления обработчика событий!");
// };

// Мы разобрались как работают два способа добавления обработчика событий,
// но существует одна проблема, если мы их используем, то таким образом мы можем
// назначить лишь одну функцию на один элемент. Имеется в виду следующее.


btn[0].onclick = function () {
     alert("Вы нажали первую кнопку вторым способом лобавления обработчика событий!");
 };

btn[0].onclick = function () {
     alert("Вы снова нажали первую кнопку вторым способом лобавления обработчика событий!");
};

// Нажимаем на кнопку на странице то отработает второй обработчик. Получается что более новая
// версия обработчика полностью заменила старую версию. Это не удобно, мы можем забыть, что ранее
// определяли обработчик для этого события в своём коде, потом переназначить и потерять полностью
// функционал или допустим мы работаем с чужим кодом, который мы полностью не проинспектировали и
// произойдут точно такие же проблемы, к тому же иногда нам нужно удалять события после их
// выполнения, а таким образом мы сделать это не сможем, такое тоже бывает мы один раз например
// кликнули на элемент, какой то функционал выполнился и всё при клике на этот элемент ничего
// происходить больше не должно.
//     Поэтому сейчас у нас есть две проблемы:
//     Первая, то что новая функция переназначает старую и полностью её перезаписывает;
// Вторая, то что данное событие мы не можем удалить.
//
