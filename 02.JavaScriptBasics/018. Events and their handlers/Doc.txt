
    Первый способ назначения обработчика в Java Script

    Используем аттрибут html.
    Мы будем передавать нашу функцию прямо в код, а также
    сюда можно передать и существующую функцию. Но использовать такой
    способ крайне не рекомендуется. Он подходит лишь для самых маленьких скриптов
    и обычно в реальных проектах вообще не используется -->
    <button onclick="alert('Вы нажали первую кнопку')" id="btn">Нажми меня</button>-->

    Второй способ - это использовать свойство DOM для событий.

    let btn = document.getElementsByTagName('button');

    btn[0].onclick = function () {
        alert("Вы нажали первую кнопку вторым способом лобавления обработчика событий!");
    };

        Мы разобрались как работают два способа добавления обработчика событий,
    но  существует одна проблема, если мы их используем, то таким образом мы можем
    назначить лишь одну функцию на один элемент. Имеется в виду следующее.

    let btn = document.getElementsByTagName('button');

    btn[0].onclick = function () {
        alert("Вы нажали первую кнопку вторым способом лобавления обработчика событий!");
    };

    btn[0].onclick = function () {
        alert("Вы снова нажали первую кнопку вторым способом лобавления обработчика событий!");
    };
    (07:10)
         Нажимаем на кнопку на странице то отработает второй обработчик. Получается что более новая
    версия обработчика полностью заменила старую версию. Это не удобно, мы можем забыть, что ранее
    определяли обработчик для этого события в своём коде, потом переназначить и потерять полностью
    функционал или допустим мы работаем с чужим кодом, который мы полностью не проинспектировали и
    произойдут точно такие же проблемы, к тому же иногда нам нужно удалять события после их выполнения,
    а таким образом мы сделать это не сможем, такое тоже бывает мы один раз например кликнули на элемент,
    какой то функционал выполнился и всё при клике на этот элемент ничего происходить больше не должно.
    Поэтому сейчас у нас есть две проблемы:
        Первая, то что новая функция переназначает старую и полностью её перезаписывает;
        Вторая, то что данное событие мы не можем удалить.

        Будем учится сразу назначать обработчики событий правильно. для этого есть методы:

            btn[0].addEventListener(
                                   'click',    // Первый параметр - название события
                                                    // Второй параметр - сам обработчик события,
                                                    // это обычная callback функция.
                                   function () {
                   alert("Вы нажали первую кнопку третьим способом добавления обработчика событий!");
            });

        Назначим ещё один обработчик клик для нашей кнопки

          btn[0].addEventListener(
                                   'click',    // Первый параметр - название события
                                                    // Второй параметр - сам обработчик события,
                                                    // это обычная callback функция.
                                   function () {
                   alert("Вы нажали первую кнопку третьим способом добавления обработчика событий!");
            });

            btn[0].addEventListener(
                                    'click',
                                function () {
                   alert("Вы опять нажали первую кнопку третьим способом добавления обработчика событий!");
            });
            // Мы видим, что выполнился первый обработчик, а за ним выполнился второй обработчик.

            // Добавляем третий обработчик.
            btn[0].addEventListener(
                                    'mouseenter', // Наша мышь заходит в пределы нашего элемента
                                    function () {
                    alert("Вы навели на первую кнопку.");
                });

