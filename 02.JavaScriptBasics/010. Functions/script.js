//
// // "showFirestMessgae" - Имя функции.
// // Существует некласное правило: имя функции должно начинатся глагола,
// // с дальнейшей препиской над, чем выполняется действие. Например:
// // "showForm", "getName" и т.д. Обычно это Camel Case.
//
// // Бывают функции без имени их называют анонимными функциями,
// // они используются здесь и сейчас, поэтому мы и не даём им
// // имя без имени мы не сможем потом к ним обращаться в будущем.
// // С анонимными функциями мы ещё поработаем.
//
// // Параметры - это то, что мы пишем в круглых скобках.
// // Когда мы запускаем функции мы можем предоставить её какие-либо данные.
// // В функцию можно передать бесконечное количество аргументов.
//
// // Первое, что нам нужно знать про функции это то как ведут себя
// // переменные внутри функции. Если мы объявим переменную внутри функции,
// // то и видна она будет только внутри её.
//
// function showFirstMessage(text){
//     alert(text);
// }
//
// // Далее нам нужнео вызвать нашу функцию.
// showFirstMessage("Hello, world 1!");
//
// // Первое, что нам нужно знать про функции это то как ведут себя пе ременные
// // внутри функции. Если мы объявим переменную внкутри функции,
// // то и видна она будет только внутри её.
//
//     function showSecondMessage(text){
//     alert(text);
//     let num = 20;
// }
// showSecondMessage("Hello, world 2!");
// // При попытке отобразить в консоли, будет ошибка:
// // 'Uncaught ReferenceError: num is not defined'
// //console.log(num);
//
// let num_1 = 20;
// function showThirdMessage(text){
//     alert(text);
//     num_1 = 10;
// }
// showThirdMessage("Hello, world 3!");
// // Теперь наша переменная стала глобальной
// console.log(num_1); // Выведется: 10
//
// // Здесь переменные num_2 будут совершенно разными.
// let num_2 = 20;
// function showForthMessage(text){
//     alert(text);
//     //let num_2 = 10;
//     console.log(num_2)  // Выведется: 10
// }
// showForthMessage("Hello, world 4!");
// // Теперь наша переменная стала глобальной
// console.log(num_2); // Выведется: 20
//
// // Довольно часто на собеседованиях вопрос, что такое замыкание функции,
// // для этого нужно понимать как работает функция. Если внутри функции
// // есть обращение к какой-нибудь переменной, функция сначала ищет эту
// // переменную внутри себя как в вышеописанном примере. При вызове
// // console.log(num_2) в теле функции "showForthMessage" будет искатся
// // переменная внутри функции и если не найдет то будет искаться во
// // внешних переменных и так идёт до самого высшего уровня шаг за шагом.
// // Поэтому замыкание это функция со всеми внешними переменными,
// // которые ей доступны.
// // Поэтому если мы закоментируем строчку (53) "// let num_2 = 10;", то
// // console.log(num_2)  на следующей строке (54) выведет 20.
//
// // Кроме всех этих действий функция может вернуть какое-нибудь значение
// // с помощью ключевого слова "return". Как только функция видит "return",
// // то она тут же прекращает своё действие.

function calc(a, b) {
    return (a+b);
}
console.log(calc(3,4)); // Выведется:   7
console.log(calc(8,4)); // Выведется:   12

// В этом и проявляется главная цель функций, мы вызываем их с разными
// параметрами и таким образом мы избавляемся от дублирования кода, но
// у "return" ещё одно применение, как мы видели если внутри функции
// мы объявим новую переменную, то во внешнем мире она видна не будет,
// но при помощи "return" мы можем вернуть эту переменную и записать её
// вне уже функции.

function retVal() {
    let num_5 = 50;
    return num_5;
}

let anotherNum_5 = retVal();
console.log(anotherNum_5);  //  Выведется:  50
// Таким образом мы можем передавать значение переменной
// из функции во внешний мир.
// В будущем мы также научимся возвращать сразу несколько значений из функции.
// Это иногда бывает полезным.

// У функций также бывают такие понятия как
// "Function decoration" и "Function expression".

// "Function decoration" - это функция, которая объявлена в потоке кода,
// как мы делали ранее. Все функции, которые мы
// задавали - это "Function decoration".
// Такие функции, как и переменные через "var" создаётся вначале кода, т.е.
// такие функции можно вызывать до объявления. Например:

console.log(calcNext(3,4)); // Выведется:   7
console.log(calcNext(8,4)); // Выведется:   12

function calcNext(a, b) {
    return (a+b);
}
// Это означает, что функция работает ещё до того как она объявлена
// у нас в коде.
//11:39